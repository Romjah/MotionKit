{"version":3,"file":"animations-Loading-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC9EA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxHA;AAGA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA","sources":["webpack://motion-kit/./node_modules/@storybook/react/dist/chunk-ZGTCCPPZ.mjs","webpack://motion-kit/./node_modules/@storybook/react/dist/index.mjs","webpack://motion-kit/./src/animations/Loading.stories.jsx","webpack://motion-kit/./src/animations/base.ts","webpack://motion-kit/./src/animations/loading.ts"],"sourcesContent":["import { entry_preview_exports } from './chunk-TENYCC3B.mjs';\nimport { entry_preview_docs_exports } from './chunk-EWIU6LHT.mjs';\nimport { __definePreview as __definePreview$1 } from 'storybook/internal/csf';\n\nfunction __definePreview(preview){return __definePreview$1({...preview,addons:[entry_preview_exports,entry_preview_docs_exports,...preview.addons??[]]})}\n\nexport { __definePreview };\n","export { __definePreview } from './chunk-ZGTCCPPZ.mjs';\nimport { entry_preview_exports, renderToCanvas } from './chunk-TENYCC3B.mjs';\nimport './chunk-EWIU6LHT.mjs';\nimport './chunk-XP5HYGXS.mjs';\nimport { global } from '@storybook/global';\nimport * as React from 'react';\nimport { setDefaultProjectAnnotations, setProjectAnnotations as setProjectAnnotations$1, composeStory as composeStory$1, composeStories as composeStories$1 } from 'storybook/internal/preview-api';\n\nvar{window:globalWindow}=global;globalWindow&&(globalWindow.STORYBOOK_ENV=\"react\");function setProjectAnnotations(projectAnnotations){return setDefaultProjectAnnotations(INTERNAL_DEFAULT_PROJECT_ANNOTATIONS),setProjectAnnotations$1(projectAnnotations)}var INTERNAL_DEFAULT_PROJECT_ANNOTATIONS={...entry_preview_exports,renderToCanvas:async(renderContext,canvasElement)=>{if(renderContext.storyContext.testingLibraryRender==null)return renderToCanvas(renderContext,canvasElement);let{storyContext:{context,unboundStoryFn:Story,testingLibraryRender:render}}=renderContext,{unmount}=render(React.createElement(Story,{...context}),{container:context.canvasElement});return unmount}};function composeStory(story,componentAnnotations,projectAnnotations,exportsName){return composeStory$1(story,componentAnnotations,projectAnnotations,globalThis.globalProjectAnnotations??INTERNAL_DEFAULT_PROJECT_ANNOTATIONS,exportsName)}function composeStories(csfExports,projectAnnotations){return composeStories$1(csfExports,projectAnnotations,composeStory)}typeof module<\"u\"&&module?.hot?.decline();\n\nexport { INTERNAL_DEFAULT_PROJECT_ANNOTATIONS, composeStories, composeStory, setProjectAnnotations };\n","import React, { useEffect, useRef } from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Loading } from './loading';\n\nconst meta = {\n  title: 'Animations/Loading',\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\n\nconst LoadingDemo = (props) => {\n  const { options = {}, type } = props || {};\n  const elementRef = useRef(null);\n  const loadingRef = useRef();\n\n  useEffect(() => {\n    if (elementRef.current) {\n      loadingRef.current = new Loading(elementRef.current, {\n        ...options,\n        type,\n      });\n    }\n\n    return () => {\n      if (loadingRef.current && loadingRef.current.destroy) {\n        loadingRef.current.destroy();\n      }\n    };\n  }, [options, type]);\n\n  return (\n    <div\n      ref={elementRef}\n      style={{\n        width: '200px',\n        height: '100px',\n        backgroundColor: '#4a90e2',\n        borderRadius: '8px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: 'white',\n        fontSize: '16px',\n        fontWeight: 'bold',\n      }}\n    />\n  );\n};\n\nexport const Spinner = {\n  render: () => <LoadingDemo type=\"spinner\" options={{}} />,\n};\n\nexport const Dots = {\n  render: () => <LoadingDemo type=\"dots\" options={{}} />,\n};\n\nexport const Pulse = {\n  render: () => <LoadingDemo type=\"pulse\" options={{}} />,\n};\n\nexport const Wave = {\n  render: () => <LoadingDemo type=\"wave\" options={{}} />,\n};\n\nexport const CustomColor = {\n  render: () => (\n    <LoadingDemo\n      type=\"spinner\"\n      options={{\n        color: '#ff0000',\n        size: 40,\n        thickness: 4,\n      }}\n    />\n  ),\n}; ","import { AnimationOptions } from '../types';\n\nexport class BaseAnimation {\n  protected element: HTMLElement;\n  protected options: AnimationOptions;\n  protected animation: Animation | null = null;\n\n  constructor(element: HTMLElement, options: Partial<AnimationOptions> = {}) {\n    this.element = element;\n    this.options = {\n      duration: 300,\n      easing: 'ease',\n      delay: 0,\n      iterations: 1,\n      direction: 'normal',\n      fill: 'forwards',\n      ...options,\n    };\n  }\n\n  protected createAnimation(keyframes: Keyframe[]): void {\n    this.animation = this.element.animate(keyframes, {\n      duration: this.options.duration,\n      easing: this.options.easing,\n      delay: this.options.delay,\n      iterations: this.options.iterations,\n      direction: this.options.direction,\n      fill: this.options.fill,\n    });\n\n    if (this.options.onStart) {\n      this.animation.addEventListener('start', this.options.onStart);\n    }\n\n    if (this.options.onEnd) {\n      this.animation.addEventListener('finish', this.options.onEnd);\n    }\n\n    if (this.options.onCancel) {\n      this.animation.addEventListener('cancel', this.options.onCancel);\n    }\n  }\n\n  public play(): Promise<void> {\n    if (!this.animation) {\n      throw new Error('No animation created');\n    }\n    return this.animation.play() as unknown as Promise<void>;\n  }\n\n  public pause(): void {\n    if (this.animation) {\n      this.animation.pause();\n    }\n  }\n\n  public resume(): void {\n    if (this.animation) {\n      this.animation.play();\n    }\n  }\n\n  public cancel(): void {\n    if (this.animation) {\n      this.animation.cancel();\n    }\n  }\n\n  public finish(): void {\n    if (this.animation) {\n      this.animation.finish();\n    }\n  }\n\n  public reverse(): void {\n    if (this.animation) {\n      this.animation.reverse();\n    }\n  }\n\n  public updatePlaybackRate(rate: number): void {\n    if (this.animation) {\n      this.animation.playbackRate = rate;\n    }\n  }\n\n  public getCurrentTime(): number {\n    return this.animation ? this.animation.currentTime as number : 0;\n  }\n\n  public isPlaying(): boolean {\n    return this.animation ? this.animation.playState === 'running' : false;\n  }\n\n  public isPaused(): boolean {\n    return this.animation ? this.animation.playState === 'paused' : false;\n  }\n\n  public isFinished(): boolean {\n    return this.animation ? this.animation.playState === 'finished' : false;\n  }\n\n  public updateOptions(newOptions: Partial<AnimationOptions>): void {\n    this.options = { ...this.options, ...newOptions };\n  }\n\n  public destroy(): void {\n    if (this.animation) {\n      if (this.options.onStart) {\n        this.animation.removeEventListener('start', this.options.onStart);\n      }\n      if (this.options.onEnd) {\n        this.animation.removeEventListener('finish', this.options.onEnd);\n      }\n      if (this.options.onCancel) {\n        this.animation.removeEventListener('cancel', this.options.onCancel);\n      }\n      this.animation.cancel();\n      this.animation = null;\n    }\n  }\n} ","import { BaseAnimation } from './base';\nimport { LoadingOptions } from '../types';\n\nexport class Loading extends BaseAnimation {\n  protected options: LoadingOptions;\n  private container: HTMLElement;\n\n  constructor(element: HTMLElement, options: Partial<LoadingOptions> = {}) {\n    super(element, options);\n    this.options = {\n      duration: 1000,\n      easing: 'linear',\n      delay: 0,\n      iterations: Infinity,\n      direction: 'normal',\n      fill: 'none',\n      type: 'spinner',\n      color: '#4a90e2',\n      size: 40,\n      thickness: 3,\n      ...options,\n    };\n\n    this.container = this.createContainer();\n    this.initializeElement();\n  }\n\n  private createContainer(): HTMLElement {\n    const container = document.createElement('div');\n    container.style.display = 'flex';\n    container.style.alignItems = 'center';\n    container.style.justifyContent = 'center';\n    container.style.width = `${this.options.size}px`;\n    container.style.height = `${this.options.size}px`;\n    this.element.appendChild(container);\n    return container;\n  }\n\n  private initializeElement(): void {\n    switch (this.options.type) {\n      case 'spinner':\n        this.createSpinner();\n        break;\n      case 'dots':\n        this.createDots();\n        break;\n      case 'pulse':\n        this.createPulse();\n        break;\n      case 'wave':\n        this.createWave();\n        break;\n      default:\n        this.createSpinner();\n    }\n  }\n\n  private createSpinner(): void {\n    const spinner = document.createElement('div');\n    spinner.style.width = '100%';\n    spinner.style.height = '100%';\n    spinner.style.border = `${this.options.thickness}px solid rgba(0, 0, 0, 0.1)`;\n    spinner.style.borderTopColor = this.options.color || '#4a90e2';\n    spinner.style.borderRadius = '50%';\n    this.container.appendChild(spinner);\n\n    const keyframes = [\n      { transform: 'rotate(0deg)' },\n      { transform: 'rotate(360deg)' }\n    ];\n\n    this.createAnimation(keyframes);\n    this.play();\n  }\n\n  private createDots(): void {\n    const dotSize = (this.options.size || 40) / 4;\n    for (let i = 0; i < 3; i++) {\n      const dot = document.createElement('div');\n      dot.style.width = `${dotSize}px`;\n      dot.style.height = `${dotSize}px`;\n      dot.style.backgroundColor = this.options.color || '#4a90e2';\n      dot.style.borderRadius = '50%';\n      dot.style.margin = '0 4px';\n      this.container.appendChild(dot);\n\n      const keyframes = [\n        { transform: 'translateY(0)', opacity: '0.3' },\n        { transform: 'translateY(-100%)', opacity: '1' },\n        { transform: 'translateY(0)', opacity: '0.3' }\n      ];\n\n      this.createAnimation(keyframes);\n      if (this.animation) {\n        this.animation.startTime = (this.options.delay || 0) + (i * (this.options.duration || 1000) / 3);\n      }\n    }\n  }\n\n  private createPulse(): void {\n    const pulse = document.createElement('div');\n    pulse.style.width = '100%';\n    pulse.style.height = '100%';\n    pulse.style.backgroundColor = this.options.color || '#4a90e2';\n    pulse.style.borderRadius = '50%';\n    this.container.appendChild(pulse);\n\n    const keyframes = [\n      { transform: 'scale(0.5)', opacity: '0.3' },\n      { transform: 'scale(1)', opacity: '1' },\n      { transform: 'scale(0.5)', opacity: '0.3' }\n    ];\n\n    this.createAnimation(keyframes);\n    this.play();\n  }\n\n  private createWave(): void {\n    const barWidth = this.options.thickness || 3;\n    const gap = barWidth;\n    const numBars = Math.floor((this.options.size || 40) / (barWidth + gap));\n\n    for (let i = 0; i < numBars; i++) {\n      const bar = document.createElement('div');\n      bar.style.width = `${barWidth}px`;\n      bar.style.height = '100%';\n      bar.style.backgroundColor = this.options.color || '#4a90e2';\n      bar.style.margin = `0 ${gap/2}px`;\n      this.container.appendChild(bar);\n\n      const keyframes = [\n        { transform: 'scaleY(0.4)' },\n        { transform: 'scaleY(1)' },\n        { transform: 'scaleY(0.4)' }\n      ];\n\n      this.createAnimation(keyframes);\n      if (this.animation) {\n        this.animation.startTime = (this.options.delay || 0) + (i * (this.options.duration || 1000) / numBars);\n      }\n    }\n  }\n\n  public updateOptions(newOptions: Partial<LoadingOptions>): void {\n    this.options = { ...this.options, ...newOptions };\n    this.container.innerHTML = '';\n    this.initializeElement();\n  }\n\n  public destroy(): void {\n    super.destroy();\n    this.container.remove();\n  }\n} "],"names":[],"sourceRoot":""}