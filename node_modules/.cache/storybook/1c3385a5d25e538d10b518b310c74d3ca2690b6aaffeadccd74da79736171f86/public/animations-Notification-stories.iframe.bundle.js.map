{"version":3,"file":"animations-Notification-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC1IA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA","sources":["webpack://motion-kit/./src/animations/Notification.stories.jsx","webpack://motion-kit/./src/animations/notifications.ts"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Notification } from './notifications';\n\nconst meta = {\n  title: 'Animations/Notification',\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\n\nconst NotificationDemo = (props) => {\n  const { options = {}, message = 'This is a notification' } = props || {};\n  const elementRef = useRef(null);\n  const notificationRef = useRef();\n\n  useEffect(() => {\n    if (elementRef.current) {\n      notificationRef.current = new Notification(elementRef.current, options);\n      notificationRef.current.show(message);\n    }\n\n    return () => {\n      if (notificationRef.current && notificationRef.current.destroy) {\n        notificationRef.current.destroy();\n      }\n    };\n  }, [options, message]);\n\n  return <div ref={elementRef} />;\n};\n\nexport const Success = {\n  render: () => (\n    <NotificationDemo\n      options={{\n        type: 'success',\n        position: 'top-right',\n      }}\n      message=\"Operation completed successfully!\"\n    />\n  ),\n};\n\nexport const Error = {\n  render: () => (\n    <NotificationDemo\n      options={{\n        type: 'error',\n        position: 'top-right',\n      }}\n      message=\"An error occurred. Please try again.\"\n    />\n  ),\n};\n\nexport const Warning = {\n  render: () => (\n    <NotificationDemo\n      options={{\n        type: 'warning',\n        position: 'top-right',\n      }}\n      message=\"Please review your changes before proceeding.\"\n    />\n  ),\n};\n\nexport const Info = {\n  render: () => (\n    <NotificationDemo\n      options={{\n        type: 'info',\n        position: 'top-right',\n      }}\n      message=\"New updates are available.\"\n    />\n  ),\n};\n\nexport const TopLeft = {\n  render: () => (\n    <NotificationDemo\n      options={{\n        type: 'info',\n        position: 'top-left',\n      }}\n      message=\"Notification in top-left corner\"\n    />\n  ),\n};\n\nexport const BottomRight = {\n  render: () => (\n    <NotificationDemo\n      options={{\n        type: 'info',\n        position: 'bottom-right',\n      }}\n      message=\"Notification in bottom-right corner\"\n    />\n  ),\n};\n\nexport const BottomLeft = {\n  render: () => (\n    <NotificationDemo\n      options={{\n        type: 'info',\n        position: 'bottom-left',\n      }}\n      message=\"Notification in bottom-left corner\"\n    />\n  ),\n};\n\nexport const TopCenter = {\n  render: () => (\n    <NotificationDemo\n      options={{\n        type: 'info',\n        position: 'top-center',\n      }}\n      message=\"Notification in top-center\"\n    />\n  ),\n};\n\nexport const BottomCenter = {\n  render: () => (\n    <NotificationDemo\n      options={{\n        type: 'info',\n        position: 'bottom-center',\n      }}\n      message=\"Notification in bottom-center\"\n    />\n  ),\n}; ","import { NotificationOptions } from '../types';\n\nexport class Notification {\n  private element: HTMLElement;\n  private options: NotificationOptions;\n  private container: HTMLElement;\n\n  constructor(element: HTMLElement, options: Partial<NotificationOptions> = {}) {\n    this.element = element;\n    this.options = {\n      duration: 300,\n      easing: 'ease-in-out',\n      position: 'top-right',\n      type: 'info',\n      ...options,\n    };\n    this.container = this.createContainer();\n  }\n\n  private createContainer(): HTMLElement {\n    const container = document.createElement('div');\n    container.style.position = 'fixed';\n    container.style.zIndex = '1000';\n    container.style.display = 'flex';\n    container.style.flexDirection = 'column';\n    container.style.gap = '10px';\n    container.style.padding = '20px';\n\n    // Position the container\n    switch (this.options.position) {\n      case 'top-right':\n        container.style.top = '0';\n        container.style.right = '0';\n        break;\n      case 'top-left':\n        container.style.top = '0';\n        container.style.left = '0';\n        break;\n      case 'bottom-right':\n        container.style.bottom = '0';\n        container.style.right = '0';\n        break;\n      case 'bottom-left':\n        container.style.bottom = '0';\n        container.style.left = '0';\n        break;\n      case 'top-center':\n        container.style.top = '0';\n        container.style.left = '50%';\n        container.style.transform = 'translateX(-50%)';\n        break;\n      case 'bottom-center':\n        container.style.bottom = '0';\n        container.style.left = '50%';\n        container.style.transform = 'translateX(-50%)';\n        break;\n    }\n\n    document.body.appendChild(container);\n    return container;\n  }\n\n  private getTypeStyles(): Partial<CSSStyleDeclaration> {\n    const baseStyles = {\n      padding: '12px 24px',\n      borderRadius: '4px',\n      color: 'white',\n      boxShadow: '0 2px 5px rgba(0,0,0,0.2)',\n      margin: '0',\n      maxWidth: '300px',\n      wordBreak: 'break-word' as const,\n    };\n\n    const typeStyles = {\n      success: {\n        backgroundColor: '#2ecc71',\n      },\n      error: {\n        backgroundColor: '#e74c3c',\n      },\n      warning: {\n        backgroundColor: '#f1c40f',\n        color: '#2c3e50',\n      },\n      info: {\n        backgroundColor: '#3498db',\n      },\n    };\n\n    return {\n      ...baseStyles,\n      ...typeStyles[this.options.type || 'info'],\n    };\n  }\n\n  show(message: string): Animation {\n    // Apply styles to the element\n    Object.assign(this.element.style, this.getTypeStyles());\n    this.element.textContent = message;\n\n    // Add to container\n    this.container.appendChild(this.element);\n\n    // Animate in\n    const animation = this.element.animate(\n      [\n        { \n          opacity: 0,\n          transform: this.getInitialTransform(),\n        },\n        { \n          opacity: 1,\n          transform: 'none',\n        },\n      ],\n      {\n        duration: this.options.duration,\n        easing: this.options.easing,\n        fill: 'forwards',\n      }\n    );\n\n    // Auto remove after animation\n    animation.onfinish = () => {\n      setTimeout(() => {\n        this.hide();\n      }, 3000); // Show for 3 seconds\n    };\n\n    return animation;\n  }\n\n  private getInitialTransform(): string {\n    switch (this.options.position) {\n      case 'top-right':\n      case 'top-left':\n      case 'top-center':\n        return 'translateY(-100%)';\n      case 'bottom-right':\n      case 'bottom-left':\n      case 'bottom-center':\n        return 'translateY(100%)';\n      default:\n        return 'translateY(-100%)';\n    }\n  }\n\n  hide(): void {\n    const animation = this.element.animate(\n      [\n        { \n          opacity: 1,\n          transform: 'none',\n        },\n        { \n          opacity: 0,\n          transform: this.getInitialTransform(),\n        },\n      ],\n      {\n        duration: this.options.duration,\n        easing: this.options.easing,\n        fill: 'forwards',\n      }\n    );\n\n    animation.onfinish = () => {\n      this.element.remove();\n    };\n  }\n\n  destroy(): void {\n    this.hide();\n    this.container.remove();\n  }\n} "],"names":[],"sourceRoot":""}