{"version":3,"file":"animations-States-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC9JA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxHA;AAGA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAJA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA","sources":["webpack://motion-kit/./node_modules/@storybook/react/dist/chunk-ZGTCCPPZ.mjs","webpack://motion-kit/./node_modules/@storybook/react/dist/index.mjs","webpack://motion-kit/./src/animations/States.stories.jsx","webpack://motion-kit/./src/animations/base.ts","webpack://motion-kit/./src/animations/states.ts"],"sourcesContent":["import { entry_preview_exports } from './chunk-TENYCC3B.mjs';\nimport { entry_preview_docs_exports } from './chunk-EWIU6LHT.mjs';\nimport { __definePreview as __definePreview$1 } from 'storybook/internal/csf';\n\nfunction __definePreview(preview){return __definePreview$1({...preview,addons:[entry_preview_exports,entry_preview_docs_exports,...preview.addons??[]]})}\n\nexport { __definePreview };\n","export { __definePreview } from './chunk-ZGTCCPPZ.mjs';\nimport { entry_preview_exports, renderToCanvas } from './chunk-TENYCC3B.mjs';\nimport './chunk-EWIU6LHT.mjs';\nimport './chunk-XP5HYGXS.mjs';\nimport { global } from '@storybook/global';\nimport * as React from 'react';\nimport { setDefaultProjectAnnotations, setProjectAnnotations as setProjectAnnotations$1, composeStory as composeStory$1, composeStories as composeStories$1 } from 'storybook/internal/preview-api';\n\nvar{window:globalWindow}=global;globalWindow&&(globalWindow.STORYBOOK_ENV=\"react\");function setProjectAnnotations(projectAnnotations){return setDefaultProjectAnnotations(INTERNAL_DEFAULT_PROJECT_ANNOTATIONS),setProjectAnnotations$1(projectAnnotations)}var INTERNAL_DEFAULT_PROJECT_ANNOTATIONS={...entry_preview_exports,renderToCanvas:async(renderContext,canvasElement)=>{if(renderContext.storyContext.testingLibraryRender==null)return renderToCanvas(renderContext,canvasElement);let{storyContext:{context,unboundStoryFn:Story,testingLibraryRender:render}}=renderContext,{unmount}=render(React.createElement(Story,{...context}),{container:context.canvasElement});return unmount}};function composeStory(story,componentAnnotations,projectAnnotations,exportsName){return composeStory$1(story,componentAnnotations,projectAnnotations,globalThis.globalProjectAnnotations??INTERNAL_DEFAULT_PROJECT_ANNOTATIONS,exportsName)}function composeStories(csfExports,projectAnnotations){return composeStories$1(csfExports,projectAnnotations,composeStory)}typeof module<\"u\"&&module?.hot?.decline();\n\nexport { INTERNAL_DEFAULT_PROJECT_ANNOTATIONS, composeStories, composeStory, setProjectAnnotations };\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { States } from './states';\n\nconst meta = {\n  title: 'Animations/States',\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: \"Le composant States permet d'afficher différents états visuels (succès, erreur, info, etc.) avec icône, message et animation. Idéal pour le feedback utilisateur.\",\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\n\nconst StatesDemo = (props) => {\n  const { options = {}, initialState = 'success' } = props || {};\n  const elementRef = useRef(null);\n  const statesRef = useRef();\n  const [currentState, setCurrentState] = useState(initialState);\n\n  useEffect(() => {\n    if (elementRef.current) {\n      statesRef.current = new States(elementRef.current, {\n        ...options,\n        state: currentState,\n      });\n    }\n\n    return () => {\n      if (statesRef.current && statesRef.current.destroy) {\n        statesRef.current.destroy();\n      }\n    };\n  }, [options, currentState]);\n\n  const cycleState = () => {\n    const states = [\n      'success',\n      'error',\n      'warning',\n      'info',\n      'loading',\n    ];\n    const currentIndex = states.indexOf(currentState);\n    const nextIndex = (currentIndex + 1) % states.length;\n    setCurrentState(states[nextIndex]);\n  };\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '20px' }}>\n      <div\n        ref={elementRef}\n        style={{\n          width: '200px',\n          height: '100px',\n          backgroundColor: '#4a90e2',\n          borderRadius: '8px',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n          fontSize: '16px',\n          fontWeight: 'bold',\n        }}\n      >\n        {currentState}\n      </div>\n      <button\n        onClick={cycleState}\n        style={{\n          padding: '8px 16px',\n          backgroundColor: '#4a90e2',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer',\n        }}\n      >\n        Change State\n      </button>\n    </div>\n  );\n};\n\nexport const Success = {\n  render: () => <StatesDemo initialState=\"success\" options={{}} />,\n  parameters: {\n    docs: {\n      description: {\n        story: \"Affiche l'état de succès avec icône ✓, couleurs vertes et animation d'apparition.\",\n      },\n    },\n  },\n};\n\nexport const Error = {\n  render: () => <StatesDemo initialState=\"error\" options={{}} />,\n  parameters: {\n    docs: {\n      description: {\n        story: \"Affiche l'état d'erreur avec icône ✕, couleurs rouges et animation d'apparition.\",\n      },\n    },\n  },\n};\n\nexport const Warning = {\n  render: () => <StatesDemo initialState=\"warning\" options={{}} />,\n  parameters: {\n    docs: {\n      description: {\n        story: \"Affiche l'état d'avertissement avec icône ⚠, couleurs orange et animation d'apparition.\",\n      },\n    },\n  },\n};\n\nexport const Info = {\n  render: () => <StatesDemo initialState=\"info\" options={{}} />,\n  parameters: {\n    docs: {\n      description: {\n        story: \"Affiche l'état d'information avec icône ℹ, couleurs bleues et animation d'apparition.\",\n      },\n    },\n  },\n};\n\nexport const Loading = {\n  render: () => <StatesDemo initialState=\"loading\" options={{}} />,\n  parameters: {\n    docs: {\n      description: {\n        story: \"Affiche l'état de chargement avec icône ⟳, couleurs grises et animation de rotation sur l'icône.\",\n      },\n    },\n  },\n};\n\nexport const WithMessage = {\n  render: () => (\n    <StatesDemo\n      options={{\n        message: 'This is a custom message',\n        icon: true,\n      }}\n    />\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: \"Affiche un état personnalisé avec message et icône. Permet d'afficher n'importe quel texte d'information ou de feedback.\",\n      },\n    },\n  },\n}; ","import { AnimationOptions } from '../types';\n\nexport class BaseAnimation {\n  protected element: HTMLElement;\n  protected options: AnimationOptions;\n  protected animation: Animation | null = null;\n\n  constructor(element: HTMLElement, options: Partial<AnimationOptions> = {}) {\n    this.element = element;\n    this.options = {\n      duration: 300,\n      easing: 'ease',\n      delay: 0,\n      iterations: 1,\n      direction: 'normal',\n      fill: 'forwards',\n      ...options,\n    };\n  }\n\n  protected createAnimation(keyframes: Keyframe[]): void {\n    this.animation = this.element.animate(keyframes, {\n      duration: this.options.duration,\n      easing: this.options.easing,\n      delay: this.options.delay,\n      iterations: this.options.iterations,\n      direction: this.options.direction,\n      fill: this.options.fill,\n    });\n\n    if (this.options.onStart) {\n      this.animation.addEventListener('start', this.options.onStart);\n    }\n\n    if (this.options.onEnd) {\n      this.animation.addEventListener('finish', this.options.onEnd);\n    }\n\n    if (this.options.onCancel) {\n      this.animation.addEventListener('cancel', this.options.onCancel);\n    }\n  }\n\n  public play(): Promise<void> {\n    if (!this.animation) {\n      throw new Error('No animation created');\n    }\n    return this.animation.play() as unknown as Promise<void>;\n  }\n\n  public pause(): void {\n    if (this.animation) {\n      this.animation.pause();\n    }\n  }\n\n  public resume(): void {\n    if (this.animation) {\n      this.animation.play();\n    }\n  }\n\n  public cancel(): void {\n    if (this.animation) {\n      this.animation.cancel();\n    }\n  }\n\n  public finish(): void {\n    if (this.animation) {\n      this.animation.finish();\n    }\n  }\n\n  public reverse(): void {\n    if (this.animation) {\n      this.animation.reverse();\n    }\n  }\n\n  public updatePlaybackRate(rate: number): void {\n    if (this.animation) {\n      this.animation.playbackRate = rate;\n    }\n  }\n\n  public getCurrentTime(): number {\n    return this.animation ? this.animation.currentTime as number : 0;\n  }\n\n  public isPlaying(): boolean {\n    return this.animation ? this.animation.playState === 'running' : false;\n  }\n\n  public isPaused(): boolean {\n    return this.animation ? this.animation.playState === 'paused' : false;\n  }\n\n  public isFinished(): boolean {\n    return this.animation ? this.animation.playState === 'finished' : false;\n  }\n\n  public updateOptions(newOptions: Partial<AnimationOptions>): void {\n    this.options = { ...this.options, ...newOptions };\n  }\n\n  public destroy(): void {\n    if (this.animation) {\n      if (this.options.onStart) {\n        this.animation.removeEventListener('start', this.options.onStart);\n      }\n      if (this.options.onEnd) {\n        this.animation.removeEventListener('finish', this.options.onEnd);\n      }\n      if (this.options.onCancel) {\n        this.animation.removeEventListener('cancel', this.options.onCancel);\n      }\n      this.animation.cancel();\n      this.animation = null;\n    }\n  }\n} ","import { BaseAnimation } from './base';\nimport { StateOptions } from '../types';\n\nexport class States extends BaseAnimation {\n  protected options: StateOptions;\n  private icon: HTMLElement | null = null;\n  private message: HTMLElement | null = null;\n\n  constructor(element: HTMLElement, options: Partial<StateOptions> = {}) {\n    super(element, options);\n    this.options = {\n      duration: 300,\n      easing: 'ease',\n      delay: 0,\n      iterations: 1,\n      direction: 'normal',\n      fill: 'forwards',\n      state: 'info',\n      icon: true,\n      message: '',\n      ...options,\n    };\n\n    // Initialiser l'élément\n    this.initializeElement();\n  }\n\n  private initializeElement(): void {\n    // Styles de base\n    this.element.style.position = 'relative';\n    this.element.style.display = 'inline-flex';\n    this.element.style.alignItems = 'center';\n    this.element.style.gap = '8px';\n    this.element.style.padding = '8px 16px';\n    this.element.style.borderRadius = '4px';\n    this.element.style.transition = 'all 0.3s ease';\n\n    // Créer l'icône si nécessaire\n    if (this.options.icon) {\n      this.createIcon();\n    }\n\n    // Créer le message si nécessaire\n    if (this.options.message) {\n      this.createMessage();\n    }\n\n    // Appliquer l'état initial\n    this.setState(this.options.state as 'info' | 'success' | 'error' | 'warning' | 'loading');\n  }\n\n  private createIcon(): void {\n    this.icon = document.createElement('div');\n    this.icon.style.display = 'flex';\n    this.icon.style.alignItems = 'center';\n    this.icon.style.justifyContent = 'center';\n    this.icon.style.width = '20px';\n    this.icon.style.height = '20px';\n    this.element.appendChild(this.icon);\n  }\n\n  private createMessage(): void {\n    this.message = document.createElement('span');\n    this.message.textContent = this.options.message || '';\n    this.message.style.fontSize = '14px';\n    this.element.appendChild(this.message);\n  }\n\n  private getStateStyles(): { background: string; color: string; border: string } {\n    const styles = {\n      success: {\n        background: '#e8f5e9',\n        color: '#2e7d32',\n        border: '1px solid #a5d6a7',\n      },\n      error: {\n        background: '#ffebee',\n        color: '#c62828',\n        border: '1px solid #ef9a9a',\n      },\n      warning: {\n        background: '#fff3e0',\n        color: '#ef6c00',\n        border: '1px solid #ffcc80',\n      },\n      info: {\n        background: '#e3f2fd',\n        color: '#1565c0',\n        border: '1px solid #90caf9',\n      },\n      loading: {\n        background: '#f5f5f5',\n        color: '#616161',\n        border: '1px solid #e0e0e0',\n      },\n    } as const;\n\n    return styles[this.options.state || 'info'];\n  }\n\n  private getIconContent(): string {\n    const icons = {\n      success: '✓',\n      error: '✕',\n      warning: '⚠',\n      info: 'ℹ',\n      loading: '⟳',\n    } as const;\n\n    return icons[this.options.state || 'info'];\n  }\n\n  public setState(state: 'success' | 'error' | 'warning' | 'info' | 'loading'): void {\n    this.options.state = state;\n    const styles = this.getStateStyles();\n\n    // Appliquer les styles\n    Object.assign(this.element.style, {\n      backgroundColor: styles.background,\n      color: styles.color,\n      border: styles.border,\n    });\n\n    // Mettre à jour l'icône\n    if (this.icon) {\n      this.icon.textContent = this.getIconContent();\n      if (state === 'loading') {\n        this.icon.style.animation = 'spin 1s linear infinite';\n      } else {\n        this.icon.style.animation = 'none';\n      }\n    }\n\n    // Animer le changement d'état\n    const keyframes = [\n      { opacity: 0.5, transform: 'scale(0.95)' },\n      { opacity: 1, transform: 'scale(1)' }\n    ];\n\n    this.createAnimation(keyframes);\n    this.play();\n  }\n\n  public setMessage(message: string): void {\n    this.options.message = message;\n    if (this.message) {\n      this.message.textContent = message;\n    } else if (message) {\n      this.createMessage();\n    }\n  }\n\n  public setIcon(show: boolean): void {\n    if (show && !this.icon) {\n      this.createIcon();\n    } else if (!show && this.icon) {\n      this.icon.remove();\n      this.icon = null;\n    }\n  }\n\n  public destroy(): void {\n    super.destroy();\n    if (this.icon) {\n      this.icon.remove();\n    }\n    if (this.message) {\n      this.message.remove();\n    }\n  }\n} "],"names":[],"sourceRoot":""}