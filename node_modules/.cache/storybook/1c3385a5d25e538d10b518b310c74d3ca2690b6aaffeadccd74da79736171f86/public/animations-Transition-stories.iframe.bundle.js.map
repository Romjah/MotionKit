{"version":3,"file":"animations-Transition-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC1NA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxHA;AAGA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;;AAEA;AAAA;AAAA;AAAA;AA0CA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AA/IA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA","sources":["webpack://motion-kit/./src/animations/Transition.stories.jsx","webpack://motion-kit/./src/animations/base.ts","webpack://motion-kit/./src/animations/transition.ts"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Transition } from './transition';\n\nconst meta = {\n  title: 'Animations/Transition',\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: \"Le composant Transition permet d'animer les changements d'état d'un élément (apparition, disparition, déplacement, etc.) avec différents effets (fade, slide, scale, flip, etc.). Idéal pour les transitions de pages ou de composants.\",\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\n\nconst TransitionDemo = (props) => {\n  const { options = {} } = props || {};\n  const elementRef = useRef(null);\n  const transitionRef = useRef();\n  const [currentState, setCurrentState] = useState('initial');\n\n  useEffect(() => {\n    if (elementRef.current) {\n      transitionRef.current = new Transition(elementRef.current, options);\n    }\n\n    return () => {\n      if (transitionRef.current && transitionRef.current.destroy) {\n        transitionRef.current.destroy();\n      }\n    };\n  }, [options]);\n\n  const toggleState = () => {\n    const nextState = currentState === 'initial' ? 'exit' : 'initial';\n    if (transitionRef.current) {\n      transitionRef.current.setState(nextState);\n    }\n    setCurrentState(nextState);\n  };\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '20px' }}>\n      <div\n        ref={elementRef}\n        style={{\n          width: '200px',\n          height: '100px',\n          backgroundColor: '#4a90e2',\n          borderRadius: '8px',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n          fontSize: '16px',\n          fontWeight: 'bold',\n        }}\n      >\n        {currentState}\n      </div>\n      <button\n        onClick={toggleState}\n        style={{\n          padding: '8px 16px',\n          backgroundColor: '#4a90e2',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer',\n        }}\n      >\n        Toggle State\n      </button>\n    </div>\n  );\n};\n\nexport const Fade = {\n  render: () => (\n    <TransitionDemo\n      options={{\n        states: {\n          initial: { opacity: 1 },\n          enter: { opacity: 1 },\n          exit: { opacity: 0 },\n        },\n        duration: 300,\n      }}\n    />\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: \"Transition de type 'fade' : l'élément disparaît ou apparaît en fondu (variation d'opacité).\",\n      },\n    },\n  },\n};\n\nexport const Slide = {\n  render: () => (\n    <TransitionDemo\n      options={{\n        states: {\n          initial: { transform: 'translateX(0)' },\n          enter: { transform: 'translateX(0)' },\n          exit: { transform: 'translateX(-100%)' },\n        },\n        duration: 300,\n      }}\n    />\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: \"Transition de type 'slide' : l'élément glisse horizontalement pour entrer ou sortir de l'écran.\",\n      },\n    },\n  },\n};\n\nexport const Scale = {\n  render: () => (\n    <TransitionDemo\n      options={{\n        states: {\n          initial: { transform: 'scale(1)' },\n          enter: { transform: 'scale(1)' },\n          exit: { transform: 'scale(0)' },\n        },\n        duration: 300,\n      }}\n    />\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: \"Transition de type 'scale' : l'élément grandit ou rétrécit lors de l'apparition/disparition.\",\n      },\n    },\n  },\n};\n\nexport const Flip = {\n  render: () => (\n    <TransitionDemo\n      options={{\n        states: {\n          initial: { transform: 'rotateY(0deg)' },\n          enter: { transform: 'rotateY(0deg)' },\n          exit: { transform: 'rotateY(180deg)' },\n        },\n        duration: 300,\n      }}\n    />\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: \"Transition de type 'flip' : l'élément effectue une rotation 3D sur l'axe Y.\",\n      },\n    },\n  },\n};\n\nexport const Combined = {\n  render: () => (\n    <TransitionDemo\n      options={{\n        states: {\n          initial: {\n            opacity: 1,\n            transform: 'translateY(0) scale(1)',\n          },\n          enter: {\n            opacity: 1,\n            transform: 'translateY(0) scale(1)',\n          },\n          exit: {\n            opacity: 0,\n            transform: 'translateY(20px) scale(0.9)',\n          },\n        },\n        duration: 300,\n      }}\n    />\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: \"Transition combinée : l'élément se déplace, change d'opacité et de taille simultanément.\",\n      },\n    },\n  },\n};\n\nexport const CustomDuration = {\n  render: () => (\n    <TransitionDemo\n      options={{\n        states: {\n          initial: { opacity: 1 },\n          enter: { opacity: 1 },\n          exit: { opacity: 0 },\n        },\n        duration: 500,\n        easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\n      }}\n    />\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: \"Transition 'fade' avec durée personnalisée (500ms) et easing cubic-bezier.\",\n      },\n    },\n  },\n}; ","import { AnimationOptions } from '../types';\n\nexport class BaseAnimation {\n  protected element: HTMLElement;\n  protected options: AnimationOptions;\n  protected animation: Animation | null = null;\n\n  constructor(element: HTMLElement, options: Partial<AnimationOptions> = {}) {\n    this.element = element;\n    this.options = {\n      duration: 300,\n      easing: 'ease',\n      delay: 0,\n      iterations: 1,\n      direction: 'normal',\n      fill: 'forwards',\n      ...options,\n    };\n  }\n\n  protected createAnimation(keyframes: Keyframe[]): void {\n    this.animation = this.element.animate(keyframes, {\n      duration: this.options.duration,\n      easing: this.options.easing,\n      delay: this.options.delay,\n      iterations: this.options.iterations,\n      direction: this.options.direction,\n      fill: this.options.fill,\n    });\n\n    if (this.options.onStart) {\n      this.animation.addEventListener('start', this.options.onStart);\n    }\n\n    if (this.options.onEnd) {\n      this.animation.addEventListener('finish', this.options.onEnd);\n    }\n\n    if (this.options.onCancel) {\n      this.animation.addEventListener('cancel', this.options.onCancel);\n    }\n  }\n\n  public play(): Promise<void> {\n    if (!this.animation) {\n      throw new Error('No animation created');\n    }\n    return this.animation.play() as unknown as Promise<void>;\n  }\n\n  public pause(): void {\n    if (this.animation) {\n      this.animation.pause();\n    }\n  }\n\n  public resume(): void {\n    if (this.animation) {\n      this.animation.play();\n    }\n  }\n\n  public cancel(): void {\n    if (this.animation) {\n      this.animation.cancel();\n    }\n  }\n\n  public finish(): void {\n    if (this.animation) {\n      this.animation.finish();\n    }\n  }\n\n  public reverse(): void {\n    if (this.animation) {\n      this.animation.reverse();\n    }\n  }\n\n  public updatePlaybackRate(rate: number): void {\n    if (this.animation) {\n      this.animation.playbackRate = rate;\n    }\n  }\n\n  public getCurrentTime(): number {\n    return this.animation ? this.animation.currentTime as number : 0;\n  }\n\n  public isPlaying(): boolean {\n    return this.animation ? this.animation.playState === 'running' : false;\n  }\n\n  public isPaused(): boolean {\n    return this.animation ? this.animation.playState === 'paused' : false;\n  }\n\n  public isFinished(): boolean {\n    return this.animation ? this.animation.playState === 'finished' : false;\n  }\n\n  public updateOptions(newOptions: Partial<AnimationOptions>): void {\n    this.options = { ...this.options, ...newOptions };\n  }\n\n  public destroy(): void {\n    if (this.animation) {\n      if (this.options.onStart) {\n        this.animation.removeEventListener('start', this.options.onStart);\n      }\n      if (this.options.onEnd) {\n        this.animation.removeEventListener('finish', this.options.onEnd);\n      }\n      if (this.options.onCancel) {\n        this.animation.removeEventListener('cancel', this.options.onCancel);\n      }\n      this.animation.cancel();\n      this.animation = null;\n    }\n  }\n} ","import { BaseAnimation } from './base';\nimport { TransitionOptions, TransitionState } from '../types';\n\nexport class Transition extends BaseAnimation {\n  protected options: TransitionOptions;\n  private currentState: string = 'initial';\n\n  constructor(element: HTMLElement, options: Partial<TransitionOptions> = {}) {\n    super(element, options);\n    this.options = {\n      duration: 300,\n      easing: 'ease',\n      delay: 0,\n      iterations: 1,\n      direction: 'normal',\n      fill: 'forwards',\n      states: {\n        initial: {\n          opacity: 1,\n          transform: 'none',\n        },\n        enter: {\n          opacity: 1,\n          transform: 'translateY(0)',\n        },\n        exit: {\n          opacity: 0,\n          transform: 'translateY(20px)',\n        },\n      },\n      ...options,\n    };\n\n    this.initializeElement();\n  }\n\n  private initializeElement(): void {\n    // Styles de base\n    this.element.style.transition = `all ${this.options.duration}ms ${this.options.easing}`;\n    this.element.style.willChange = 'opacity, transform';\n\n    // Appliquer l'état initial\n    this.setState('initial');\n  }\n\n  private getStateStyles(state: string): TransitionState {\n    const stateStyles = this.options.states[state];\n    if (!stateStyles) {\n      throw new Error(`State \"${state}\" not defined in transition options`);\n    }\n    return stateStyles;\n  }\n\n  public setState(state: string): void {\n    if (state === this.currentState) return;\n\n    const styles = this.getStateStyles(state);\n    Object.entries(styles).forEach(([property, value]) => {\n      if (value !== undefined) {\n        this.element.style[property as any] = value.toString();\n      }\n    });\n\n    this.currentState = state;\n  }\n\n  public addState(name: string, styles: TransitionState): void {\n    this.options.states[name] = styles;\n  }\n\n  public removeState(name: string): void {\n    if (name === 'initial') {\n      throw new Error('Cannot remove initial state');\n    }\n    delete this.options.states[name];\n  }\n\n  public getCurrentState(): string {\n    return this.currentState;\n  }\n\n  public getAvailableStates(): string[] {\n    return Object.keys(this.options.states);\n  }\n\n  public updateOptions(newOptions: Partial<TransitionOptions>): void {\n    this.options = { ...this.options, ...newOptions };\n    this.element.style.transition = `all ${this.options.duration}ms ${this.options.easing}`;\n  }\n\n  public destroy(): void {\n    this.setState('initial');\n  }\n\n  // Predefined transitions\n  static fade(element: HTMLElement): Transition {\n    return new Transition(element, {\n      states: {\n        initial: { opacity: 1 },\n        enter: { opacity: 1 },\n        exit: { opacity: 0 },\n      },\n    });\n  }\n\n  static slide(element: HTMLElement): Transition {\n    return new Transition(element, {\n      states: {\n        initial: { transform: 'translateX(0)' },\n        enter: { transform: 'translateX(0)' },\n        exit: { transform: 'translateX(-100%)' },\n      },\n    });\n  }\n\n  static scale(element: HTMLElement): Transition {\n    return new Transition(element, {\n      states: {\n        initial: { transform: 'scale(1)' },\n        enter: { transform: 'scale(1)' },\n        exit: { transform: 'scale(0)' },\n      },\n    });\n  }\n\n  static flip(element: HTMLElement): Transition {\n    return new Transition(element, {\n      states: {\n        initial: { transform: 'rotateY(0deg)' },\n        enter: { transform: 'rotateY(0deg)' },\n        exit: { transform: 'rotateY(180deg)' },\n      },\n    });\n  }\n\n  public fadeIn(): Promise<void> {\n    const keyframes = [\n      { opacity: 0, transform: 'scale(0.95)' },\n      { opacity: 1, transform: 'scale(1)' }\n    ];\n\n    this.createAnimation(keyframes);\n    return this.play();\n  }\n\n  public fadeOut(): Promise<void> {\n    const keyframes = [\n      { opacity: 1, transform: 'scale(1)' },\n      { opacity: 0, transform: 'scale(0.95)' }\n    ];\n\n    this.createAnimation(keyframes);\n    return this.play();\n  }\n\n  public slideIn(direction: 'left' | 'right' | 'top' | 'bottom' = 'left'): Promise<void> {\n    const distance = 20;\n    let transform = '';\n\n    switch (direction) {\n      case 'left':\n        transform = `translateX(-${distance}px)`;\n        break;\n      case 'right':\n        transform = `translateX(${distance}px)`;\n        break;\n      case 'top':\n        transform = `translateY(-${distance}px)`;\n        break;\n      case 'bottom':\n        transform = `translateY(${distance}px)`;\n        break;\n    }\n\n    const keyframes = [\n      { opacity: 0, transform },\n      { opacity: 1, transform: 'translate(0, 0)' }\n    ];\n\n    this.createAnimation(keyframes);\n    return this.play();\n  }\n\n  public slideOut(direction: 'left' | 'right' | 'top' | 'bottom' = 'left'): Promise<void> {\n    const distance = 20;\n    let transform = '';\n\n    switch (direction) {\n      case 'left':\n        transform = `translateX(-${distance}px)`;\n        break;\n      case 'right':\n        transform = `translateX(${distance}px)`;\n        break;\n      case 'top':\n        transform = `translateY(-${distance}px)`;\n        break;\n      case 'bottom':\n        transform = `translateY(${distance}px)`;\n        break;\n    }\n\n    const keyframes = [\n      { opacity: 1, transform: 'translate(0, 0)' },\n      { opacity: 0, transform }\n    ];\n\n    this.createAnimation(keyframes);\n    return this.play();\n  }\n\n  public scaleIn(): Promise<void> {\n    const keyframes = [\n      { opacity: 0, transform: 'scale(0.8)' },\n      { opacity: 1, transform: 'scale(1)' }\n    ];\n\n    this.createAnimation(keyframes);\n    return this.play();\n  }\n\n  public scaleOut(): Promise<void> {\n    const keyframes = [\n      { opacity: 1, transform: 'scale(1)' },\n      { opacity: 0, transform: 'scale(0.8)' }\n    ];\n\n    this.createAnimation(keyframes);\n    return this.play();\n  }\n\n  public custom(property: string, from: string | number, to: string | number): Promise<void> {\n    const keyframes = [\n      { [property]: from },\n      { [property]: to }\n    ];\n\n    this.createAnimation(keyframes);\n    return this.play();\n  }\n} "],"names":[],"sourceRoot":""}