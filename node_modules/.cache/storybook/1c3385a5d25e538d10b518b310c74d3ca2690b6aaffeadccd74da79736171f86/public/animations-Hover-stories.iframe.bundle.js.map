{"version":3,"file":"animations-Hover-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxHA;AAGA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA","sources":["webpack://motion-kit/./src/animations/Hover.stories.jsx","webpack://motion-kit/./src/animations/base.ts","webpack://motion-kit/./src/animations/hover.ts"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Hover } from './hover';\n\nconst meta = {\n  title: 'Animations/Hover',\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\n\nconst HoverDemo = (props) => {\n  const { options = {}, effect } = props || {};\n  const elementRef = useRef(null);\n  const hoverRef = useRef();\n\n  useEffect(() => {\n    if (elementRef.current) {\n      if (effect) {\n        hoverRef.current = Hover[effect](elementRef.current);\n      } else {\n        hoverRef.current = new Hover(elementRef.current, options);\n      }\n    }\n\n    return () => {\n      if (hoverRef.current && hoverRef.current.destroy) {\n        hoverRef.current.destroy();\n      }\n    };\n  }, [options, effect]);\n\n  return (\n    <div\n      ref={elementRef}\n      style={{\n        width: '200px',\n        height: '100px',\n        backgroundColor: '#4a90e2',\n        borderRadius: '8px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: 'white',\n        fontSize: '16px',\n        fontWeight: 'bold',\n      }}\n    >\n      Hover me\n    </div>\n  );\n};\n\nexport const Default = {\n  render: () => <HoverDemo options={{ scale: 1.1, rotate: 5 }} effect={undefined} />,\n};\n\nexport const Lift = {\n  render: () => <HoverDemo options={{}} effect=\"lift\" />,\n};\n\nexport const Rotate = {\n  render: () => <HoverDemo options={{}} effect=\"rotate\" />,\n};\n\nexport const Bounce = {\n  render: () => <HoverDemo options={{}} effect=\"bounce\" />,\n};\n\nexport const Glow = {\n  render: () => <HoverDemo options={{}} effect=\"glow\" />,\n}; ","import { AnimationOptions } from '../types';\n\nexport class BaseAnimation {\n  protected element: HTMLElement;\n  protected options: AnimationOptions;\n  protected animation: Animation | null = null;\n\n  constructor(element: HTMLElement, options: Partial<AnimationOptions> = {}) {\n    this.element = element;\n    this.options = {\n      duration: 300,\n      easing: 'ease',\n      delay: 0,\n      iterations: 1,\n      direction: 'normal',\n      fill: 'forwards',\n      ...options,\n    };\n  }\n\n  protected createAnimation(keyframes: Keyframe[]): void {\n    this.animation = this.element.animate(keyframes, {\n      duration: this.options.duration,\n      easing: this.options.easing,\n      delay: this.options.delay,\n      iterations: this.options.iterations,\n      direction: this.options.direction,\n      fill: this.options.fill,\n    });\n\n    if (this.options.onStart) {\n      this.animation.addEventListener('start', this.options.onStart);\n    }\n\n    if (this.options.onEnd) {\n      this.animation.addEventListener('finish', this.options.onEnd);\n    }\n\n    if (this.options.onCancel) {\n      this.animation.addEventListener('cancel', this.options.onCancel);\n    }\n  }\n\n  public play(): Promise<void> {\n    if (!this.animation) {\n      throw new Error('No animation created');\n    }\n    return this.animation.play() as unknown as Promise<void>;\n  }\n\n  public pause(): void {\n    if (this.animation) {\n      this.animation.pause();\n    }\n  }\n\n  public resume(): void {\n    if (this.animation) {\n      this.animation.play();\n    }\n  }\n\n  public cancel(): void {\n    if (this.animation) {\n      this.animation.cancel();\n    }\n  }\n\n  public finish(): void {\n    if (this.animation) {\n      this.animation.finish();\n    }\n  }\n\n  public reverse(): void {\n    if (this.animation) {\n      this.animation.reverse();\n    }\n  }\n\n  public updatePlaybackRate(rate: number): void {\n    if (this.animation) {\n      this.animation.playbackRate = rate;\n    }\n  }\n\n  public getCurrentTime(): number {\n    return this.animation ? this.animation.currentTime as number : 0;\n  }\n\n  public isPlaying(): boolean {\n    return this.animation ? this.animation.playState === 'running' : false;\n  }\n\n  public isPaused(): boolean {\n    return this.animation ? this.animation.playState === 'paused' : false;\n  }\n\n  public isFinished(): boolean {\n    return this.animation ? this.animation.playState === 'finished' : false;\n  }\n\n  public updateOptions(newOptions: Partial<AnimationOptions>): void {\n    this.options = { ...this.options, ...newOptions };\n  }\n\n  public destroy(): void {\n    if (this.animation) {\n      if (this.options.onStart) {\n        this.animation.removeEventListener('start', this.options.onStart);\n      }\n      if (this.options.onEnd) {\n        this.animation.removeEventListener('finish', this.options.onEnd);\n      }\n      if (this.options.onCancel) {\n        this.animation.removeEventListener('cancel', this.options.onCancel);\n      }\n      this.animation.cancel();\n      this.animation = null;\n    }\n  }\n} ","import { BaseAnimation } from './base';\nimport { HoverOptions } from '../types';\n\nexport class Hover extends BaseAnimation {\n  protected options: HoverOptions;\n  private isHovered: boolean = false;\n\n  constructor(element: HTMLElement, options: Partial<HoverOptions> = {}) {\n    super(element, options);\n    this.options = {\n      duration: 300,\n      easing: 'ease',\n      delay: 0,\n      iterations: 1,\n      direction: 'normal',\n      fill: 'forwards',\n      scale: 1.05,\n      rotate: 0,\n      translateX: 0,\n      translateY: 0,\n      shadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n      ...options,\n    };\n\n    this.initializeElement();\n  }\n\n  private initializeElement(): void {\n    // Styles de base\n    this.element.style.transition = `all ${this.options.duration}ms ${this.options.easing}`;\n    this.element.style.cursor = 'pointer';\n    this.element.style.willChange = 'transform, box-shadow';\n\n    // Ajouter les événements\n    this.element.addEventListener('mouseenter', this.handleMouseEnter.bind(this));\n    this.element.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\n  }\n\n  private handleMouseEnter(): void {\n    this.isHovered = true;\n    this.applyHoverStyles();\n  }\n\n  private handleMouseLeave(): void {\n    this.isHovered = false;\n    this.resetStyles();\n  }\n\n  private applyHoverStyles(): void {\n    const transform = [\n      `scale(${this.options.scale})`,\n      `rotate(${this.options.rotate}deg)`,\n      `translate(${this.options.translateX}px, ${this.options.translateY}px)`,\n    ].join(' ');\n\n    this.element.style.transform = transform;\n    this.element.style.boxShadow = this.options.shadow || 'none';\n  }\n\n  private resetStyles(): void {\n    this.element.style.transform = 'none';\n    this.element.style.boxShadow = 'none';\n  }\n\n  public updateOptions(newOptions: Partial<HoverOptions>): void {\n    this.options = { ...this.options, ...newOptions };\n    this.element.style.transition = `all ${this.options.duration}ms ${this.options.easing}`;\n    \n    if (this.isHovered) {\n      this.applyHoverStyles();\n    }\n  }\n\n  public destroy(): void {\n    this.element.removeEventListener('mouseenter', this.handleMouseEnter.bind(this));\n    this.element.removeEventListener('mouseleave', this.handleMouseLeave.bind(this));\n    this.resetStyles();\n  }\n\n  // Predefined hover effects\n  static lift(element: HTMLElement): Hover {\n    return new Hover(element, {\n      scale: 1.05,\n      translateY: -5,\n    });\n  }\n\n  static rotate(element: HTMLElement): Hover {\n    return new Hover(element, {\n      rotate: 5,\n    });\n  }\n\n  static bounce(element: HTMLElement): Hover {\n    return new Hover(element, {\n      translateY: -10,\n      easing: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)',\n    });\n  }\n\n  static glow(element: HTMLElement): Hover {\n    const hover = new Hover(element, {\n      scale: 1.05,\n    });\n\n    element.style.transition = 'box-shadow 0.3s ease-in-out';\n    element.addEventListener('mouseenter', () => {\n      element.style.boxShadow = '0 0 20px rgba(0,0,0,0.2)';\n    });\n    element.addEventListener('mouseleave', () => {\n      element.style.boxShadow = 'none';\n    });\n\n    return hover;\n  }\n} "],"names":[],"sourceRoot":""}